//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3625
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Isid.KKH.Common.KKHSchema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Log")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Log : global::System.Data.DataSet {
        
        private LogDataDataTable tableLogData;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Log() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Log(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LogData"] != null)) {
                    base.Tables.Add(new LogDataDataTable(ds.Tables["LogData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LogDataDataTable LogData {
            get {
                return this.tableLogData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Log cln = ((Log)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LogData"] != null)) {
                    base.Tables.Add(new LogDataDataTable(ds.Tables["LogData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLogData = ((LogDataDataTable)(base.Tables["LogData"]));
            if ((initTable == true)) {
                if ((this.tableLogData != null)) {
                    this.tableLogData.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Log";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Log.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLogData = new LogDataDataTable();
            base.Tables.Add(this.tableLogData);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLogData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Log ds = new Log();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LogDataRowChangeEventHandler(object sender, LogDataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LogDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntrkTimStmp;
            
            private global::System.Data.DataColumn columntrkPl;
            
            private global::System.Data.DataColumn columntrkTnt;
            
            private global::System.Data.DataColumn columnupdTimStmp;
            
            private global::System.Data.DataColumn columnupdaPl;
            
            private global::System.Data.DataColumn columnupdTnt;
            
            private global::System.Data.DataColumn columnegCd;
            
            private global::System.Data.DataColumn columntksKgyCd;
            
            private global::System.Data.DataColumn columntksBmnSeqNo;
            
            private global::System.Data.DataColumn columntksTntSeqNo;
            
            private global::System.Data.DataColumn columnsybt;
            
            private global::System.Data.DataColumn columnkinoId;
            
            private global::System.Data.DataColumn columnkbn;
            
            private global::System.Data.DataColumn columndesc;
            
            private global::System.Data.DataColumn columnupdDate;
            
            private global::System.Data.DataColumn columntanName;
            
            private global::System.Data.DataColumn columnreceptionKind;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnstatusNm;
            
            private global::System.Data.DataColumn columnoutUpdDate;
            
            private global::System.Data.DataColumn columninUpdDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogDataDataTable() {
                this.TableName = "LogData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LogDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trkTimStmpColumn {
                get {
                    return this.columntrkTimStmp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trkPlColumn {
                get {
                    return this.columntrkPl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trkTntColumn {
                get {
                    return this.columntrkTnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updTimStmpColumn {
                get {
                    return this.columnupdTimStmp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updaPlColumn {
                get {
                    return this.columnupdaPl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updTntColumn {
                get {
                    return this.columnupdTnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn egCdColumn {
                get {
                    return this.columnegCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tksKgyCdColumn {
                get {
                    return this.columntksKgyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tksBmnSeqNoColumn {
                get {
                    return this.columntksBmnSeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tksTntSeqNoColumn {
                get {
                    return this.columntksTntSeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sybtColumn {
                get {
                    return this.columnsybt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kinoIdColumn {
                get {
                    return this.columnkinoId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kbnColumn {
                get {
                    return this.columnkbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descColumn {
                get {
                    return this.columndesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updDateColumn {
                get {
                    return this.columnupdDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tanNameColumn {
                get {
                    return this.columntanName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn receptionKindColumn {
                get {
                    return this.columnreceptionKind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusNmColumn {
                get {
                    return this.columnstatusNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn outUpdDateColumn {
                get {
                    return this.columnoutUpdDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inUpdDateColumn {
                get {
                    return this.columninUpdDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogDataRow this[int index] {
                get {
                    return ((LogDataRow)(this.Rows[index]));
                }
            }
            
            public event LogDataRowChangeEventHandler LogDataRowChanging;
            
            public event LogDataRowChangeEventHandler LogDataRowChanged;
            
            public event LogDataRowChangeEventHandler LogDataRowDeleting;
            
            public event LogDataRowChangeEventHandler LogDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLogDataRow(LogDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogDataRow AddLogDataRow(
                        string trkTimStmp, 
                        string trkPl, 
                        string trkTnt, 
                        string updTimStmp, 
                        string updaPl, 
                        string updTnt, 
                        string egCd, 
                        string tksKgyCd, 
                        string tksBmnSeqNo, 
                        string tksTntSeqNo, 
                        string sybt, 
                        string kinoId, 
                        string kbn, 
                        string desc, 
                        string updDate, 
                        string tanName, 
                        string receptionKind, 
                        string status, 
                        string statusNm, 
                        string outUpdDate, 
                        string inUpdDate) {
                LogDataRow rowLogDataRow = ((LogDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        trkTimStmp,
                        trkPl,
                        trkTnt,
                        updTimStmp,
                        updaPl,
                        updTnt,
                        egCd,
                        tksKgyCd,
                        tksBmnSeqNo,
                        tksTntSeqNo,
                        sybt,
                        kinoId,
                        kbn,
                        desc,
                        updDate,
                        tanName,
                        receptionKind,
                        status,
                        statusNm,
                        outUpdDate,
                        inUpdDate};
                rowLogDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLogDataRow);
                return rowLogDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LogDataDataTable cln = ((LogDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LogDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntrkTimStmp = base.Columns["trkTimStmp"];
                this.columntrkPl = base.Columns["trkPl"];
                this.columntrkTnt = base.Columns["trkTnt"];
                this.columnupdTimStmp = base.Columns["updTimStmp"];
                this.columnupdaPl = base.Columns["updaPl"];
                this.columnupdTnt = base.Columns["updTnt"];
                this.columnegCd = base.Columns["egCd"];
                this.columntksKgyCd = base.Columns["tksKgyCd"];
                this.columntksBmnSeqNo = base.Columns["tksBmnSeqNo"];
                this.columntksTntSeqNo = base.Columns["tksTntSeqNo"];
                this.columnsybt = base.Columns["sybt"];
                this.columnkinoId = base.Columns["kinoId"];
                this.columnkbn = base.Columns["kbn"];
                this.columndesc = base.Columns["desc"];
                this.columnupdDate = base.Columns["updDate"];
                this.columntanName = base.Columns["tanName"];
                this.columnreceptionKind = base.Columns["receptionKind"];
                this.columnstatus = base.Columns["status"];
                this.columnstatusNm = base.Columns["statusNm"];
                this.columnoutUpdDate = base.Columns["outUpdDate"];
                this.columninUpdDate = base.Columns["inUpdDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntrkTimStmp = new global::System.Data.DataColumn("trkTimStmp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrkTimStmp);
                this.columntrkPl = new global::System.Data.DataColumn("trkPl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrkPl);
                this.columntrkTnt = new global::System.Data.DataColumn("trkTnt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrkTnt);
                this.columnupdTimStmp = new global::System.Data.DataColumn("updTimStmp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdTimStmp);
                this.columnupdaPl = new global::System.Data.DataColumn("updaPl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdaPl);
                this.columnupdTnt = new global::System.Data.DataColumn("updTnt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdTnt);
                this.columnegCd = new global::System.Data.DataColumn("egCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnegCd);
                this.columntksKgyCd = new global::System.Data.DataColumn("tksKgyCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntksKgyCd);
                this.columntksBmnSeqNo = new global::System.Data.DataColumn("tksBmnSeqNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntksBmnSeqNo);
                this.columntksTntSeqNo = new global::System.Data.DataColumn("tksTntSeqNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntksTntSeqNo);
                this.columnsybt = new global::System.Data.DataColumn("sybt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsybt);
                this.columnkinoId = new global::System.Data.DataColumn("kinoId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkinoId);
                this.columnkbn = new global::System.Data.DataColumn("kbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkbn);
                this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndesc);
                this.columnupdDate = new global::System.Data.DataColumn("updDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdDate);
                this.columntanName = new global::System.Data.DataColumn("tanName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntanName);
                this.columnreceptionKind = new global::System.Data.DataColumn("receptionKind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreceptionKind);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnstatusNm = new global::System.Data.DataColumn("statusNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatusNm);
                this.columnoutUpdDate = new global::System.Data.DataColumn("outUpdDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoutUpdDate);
                this.columninUpdDate = new global::System.Data.DataColumn("inUpdDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninUpdDate);
                this.columnkinoId.Caption = "kbn";
                this.columnstatusNm.Caption = "updDate";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogDataRow NewLogDataRow() {
                return ((LogDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LogDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LogDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LogDataRowChanged != null)) {
                    this.LogDataRowChanged(this, new LogDataRowChangeEvent(((LogDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LogDataRowChanging != null)) {
                    this.LogDataRowChanging(this, new LogDataRowChangeEvent(((LogDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LogDataRowDeleted != null)) {
                    this.LogDataRowDeleted(this, new LogDataRowChangeEvent(((LogDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LogDataRowDeleting != null)) {
                    this.LogDataRowDeleting(this, new LogDataRowChangeEvent(((LogDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLogDataRow(LogDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Log ds = new Log();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LogDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LogDataRow : global::System.Data.DataRow {
            
            private LogDataDataTable tableLogData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLogData = ((LogDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trkTimStmp {
                get {
                    try {
                        return ((string)(this[this.tableLogData.trkTimStmpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'trkTimStmp\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.trkTimStmpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trkPl {
                get {
                    try {
                        return ((string)(this[this.tableLogData.trkPlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'trkPl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.trkPlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trkTnt {
                get {
                    try {
                        return ((string)(this[this.tableLogData.trkTntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'trkTnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.trkTntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string updTimStmp {
                get {
                    try {
                        return ((string)(this[this.tableLogData.updTimStmpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'updTimStmp\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.updTimStmpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string updaPl {
                get {
                    try {
                        return ((string)(this[this.tableLogData.updaPlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'updaPl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.updaPlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string updTnt {
                get {
                    try {
                        return ((string)(this[this.tableLogData.updTntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'updTnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.updTntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string egCd {
                get {
                    try {
                        return ((string)(this[this.tableLogData.egCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'egCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.egCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tksKgyCd {
                get {
                    try {
                        return ((string)(this[this.tableLogData.tksKgyCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'tksKgyCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.tksKgyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tksBmnSeqNo {
                get {
                    try {
                        return ((string)(this[this.tableLogData.tksBmnSeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'tksBmnSeqNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.tksBmnSeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tksTntSeqNo {
                get {
                    try {
                        return ((string)(this[this.tableLogData.tksTntSeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'tksTntSeqNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.tksTntSeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sybt {
                get {
                    try {
                        return ((string)(this[this.tableLogData.sybtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'sybt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.sybtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kinoId {
                get {
                    try {
                        return ((string)(this[this.tableLogData.kinoIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'kinoId\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.kinoIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kbn {
                get {
                    try {
                        return ((string)(this[this.tableLogData.kbnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'kbn\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.kbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string desc {
                get {
                    try {
                        return ((string)(this[this.tableLogData.descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'desc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string updDate {
                get {
                    try {
                        return ((string)(this[this.tableLogData.updDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'updDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.updDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tanName {
                get {
                    try {
                        return ((string)(this[this.tableLogData.tanNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'tanName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.tanNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string receptionKind {
                get {
                    try {
                        return ((string)(this[this.tableLogData.receptionKindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'receptionKind\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.receptionKindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    try {
                        return ((string)(this[this.tableLogData.statusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'status\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string statusNm {
                get {
                    try {
                        return ((string)(this[this.tableLogData.statusNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'statusNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.statusNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string outUpdDate {
                get {
                    try {
                        return ((string)(this[this.tableLogData.outUpdDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'outUpdDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.outUpdDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inUpdDate {
                get {
                    try {
                        return ((string)(this[this.tableLogData.inUpdDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'LogData\' にある列 \'inUpdDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLogData.inUpdDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrkTimStmpNull() {
                return this.IsNull(this.tableLogData.trkTimStmpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrkTimStmpNull() {
                this[this.tableLogData.trkTimStmpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrkPlNull() {
                return this.IsNull(this.tableLogData.trkPlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrkPlNull() {
                this[this.tableLogData.trkPlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrkTntNull() {
                return this.IsNull(this.tableLogData.trkTntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrkTntNull() {
                this[this.tableLogData.trkTntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupdTimStmpNull() {
                return this.IsNull(this.tableLogData.updTimStmpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupdTimStmpNull() {
                this[this.tableLogData.updTimStmpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupdaPlNull() {
                return this.IsNull(this.tableLogData.updaPlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupdaPlNull() {
                this[this.tableLogData.updaPlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupdTntNull() {
                return this.IsNull(this.tableLogData.updTntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupdTntNull() {
                this[this.tableLogData.updTntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsegCdNull() {
                return this.IsNull(this.tableLogData.egCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetegCdNull() {
                this[this.tableLogData.egCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstksKgyCdNull() {
                return this.IsNull(this.tableLogData.tksKgyCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettksKgyCdNull() {
                this[this.tableLogData.tksKgyCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstksBmnSeqNoNull() {
                return this.IsNull(this.tableLogData.tksBmnSeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettksBmnSeqNoNull() {
                this[this.tableLogData.tksBmnSeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstksTntSeqNoNull() {
                return this.IsNull(this.tableLogData.tksTntSeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettksTntSeqNoNull() {
                this[this.tableLogData.tksTntSeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssybtNull() {
                return this.IsNull(this.tableLogData.sybtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsybtNull() {
                this[this.tableLogData.sybtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskinoIdNull() {
                return this.IsNull(this.tableLogData.kinoIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkinoIdNull() {
                this[this.tableLogData.kinoIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskbnNull() {
                return this.IsNull(this.tableLogData.kbnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkbnNull() {
                this[this.tableLogData.kbnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNull() {
                return this.IsNull(this.tableLogData.descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNull() {
                this[this.tableLogData.descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupdDateNull() {
                return this.IsNull(this.tableLogData.updDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupdDateNull() {
                this[this.tableLogData.updDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstanNameNull() {
                return this.IsNull(this.tableLogData.tanNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettanNameNull() {
                this[this.tableLogData.tanNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreceptionKindNull() {
                return this.IsNull(this.tableLogData.receptionKindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreceptionKindNull() {
                this[this.tableLogData.receptionKindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tableLogData.statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tableLogData.statusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNmNull() {
                return this.IsNull(this.tableLogData.statusNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNmNull() {
                this[this.tableLogData.statusNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoutUpdDateNull() {
                return this.IsNull(this.tableLogData.outUpdDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoutUpdDateNull() {
                this[this.tableLogData.outUpdDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinUpdDateNull() {
                return this.IsNull(this.tableLogData.inUpdDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinUpdDateNull() {
                this[this.tableLogData.inUpdDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LogDataRowChangeEvent : global::System.EventArgs {
            
            private LogDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogDataRowChangeEvent(LogDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591