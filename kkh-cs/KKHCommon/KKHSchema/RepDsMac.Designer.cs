//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3623
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Isid.KKH.Common.KKHSchema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RepDsMac")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RepDsMac : global::System.Data.DataSet {
        
        private RepmacDataTable tableRepmac;
        
        private RepmacSchklstDataTable tableRepmacSchklst;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RepDsMac() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RepDsMac(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Repmac"] != null)) {
                    base.Tables.Add(new RepmacDataTable(ds.Tables["Repmac"]));
                }
                if ((ds.Tables["RepmacSchklst"] != null)) {
                    base.Tables.Add(new RepmacSchklstDataTable(ds.Tables["RepmacSchklst"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RepmacDataTable Repmac {
            get {
                return this.tableRepmac;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RepmacSchklstDataTable RepmacSchklst {
            get {
                return this.tableRepmacSchklst;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RepDsMac cln = ((RepDsMac)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Repmac"] != null)) {
                    base.Tables.Add(new RepmacDataTable(ds.Tables["Repmac"]));
                }
                if ((ds.Tables["RepmacSchklst"] != null)) {
                    base.Tables.Add(new RepmacSchklstDataTable(ds.Tables["RepmacSchklst"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRepmac = ((RepmacDataTable)(base.Tables["Repmac"]));
            if ((initTable == true)) {
                if ((this.tableRepmac != null)) {
                    this.tableRepmac.InitVars();
                }
            }
            this.tableRepmacSchklst = ((RepmacSchklstDataTable)(base.Tables["RepmacSchklst"]));
            if ((initTable == true)) {
                if ((this.tableRepmacSchklst != null)) {
                    this.tableRepmacSchklst.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RepDsMac";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RepDsMac.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRepmac = new RepmacDataTable();
            base.Tables.Add(this.tableRepmac);
            this.tableRepmacSchklst = new RepmacSchklstDataTable();
            base.Tables.Add(this.tableRepmacSchklst);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRepmac() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRepmacSchklst() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RepDsMac ds = new RepDsMac();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void RepmacRowChangeEventHandler(object sender, RepmacRowChangeEvent e);
        
        public delegate void RepmacSchklstRowChangeEventHandler(object sender, RepmacSchklstRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RepmacDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnseiGak;
            
            private global::System.Data.DataColumn columnDate1;
            
            private global::System.Data.DataColumn columnkbn1;
            
            private global::System.Data.DataColumn columncode1;
            
            private global::System.Data.DataColumn columncode2;
            
            private global::System.Data.DataColumn columncode4;
            
            private global::System.Data.DataColumn columnname1;
            
            private global::System.Data.DataColumn columnname2;
            
            private global::System.Data.DataColumn columnname3;
            
            private global::System.Data.DataColumn columnkngk1;
            
            private global::System.Data.DataColumn columnkngk2;
            
            private global::System.Data.DataColumn columnsonota1;
            
            private global::System.Data.DataColumn columnjyutNo;
            
            private global::System.Data.DataColumn columnjyMeiNo;
            
            private global::System.Data.DataColumn columnurMeiNo;
            
            private global::System.Data.DataColumn columnrenbn;
            
            private global::System.Data.DataColumn columnsonota2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacDataTable() {
                this.TableName = "Repmac";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepmacDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RepmacDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn seiGakColumn {
                get {
                    return this.columnseiGak;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date1Column {
                get {
                    return this.columnDate1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kbn1Column {
                get {
                    return this.columnkbn1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn code1Column {
                get {
                    return this.columncode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn code2Column {
                get {
                    return this.columncode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn code4Column {
                get {
                    return this.columncode4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name1Column {
                get {
                    return this.columnname1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name2Column {
                get {
                    return this.columnname2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name3Column {
                get {
                    return this.columnname3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kngk1Column {
                get {
                    return this.columnkngk1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kngk2Column {
                get {
                    return this.columnkngk2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sonota1Column {
                get {
                    return this.columnsonota1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jyutNoColumn {
                get {
                    return this.columnjyutNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jyMeiNoColumn {
                get {
                    return this.columnjyMeiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn urMeiNoColumn {
                get {
                    return this.columnurMeiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn renbnColumn {
                get {
                    return this.columnrenbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sonota2Column {
                get {
                    return this.columnsonota2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacRow this[int index] {
                get {
                    return ((RepmacRow)(this.Rows[index]));
                }
            }
            
            public event RepmacRowChangeEventHandler RepmacRowChanging;
            
            public event RepmacRowChangeEventHandler RepmacRowChanged;
            
            public event RepmacRowChangeEventHandler RepmacRowDeleting;
            
            public event RepmacRowChangeEventHandler RepmacRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRepmacRow(RepmacRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacRow AddRepmacRow(
                        decimal seiGak, 
                        string Date1, 
                        string kbn1, 
                        string code1, 
                        string code2, 
                        string code4, 
                        string name1, 
                        string name2, 
                        string name3, 
                        decimal kngk1, 
                        decimal kngk2, 
                        string sonota1, 
                        string jyutNo, 
                        string jyMeiNo, 
                        string urMeiNo, 
                        string renbn, 
                        string sonota2) {
                RepmacRow rowRepmacRow = ((RepmacRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        seiGak,
                        Date1,
                        kbn1,
                        code1,
                        code2,
                        code4,
                        name1,
                        name2,
                        name3,
                        kngk1,
                        kngk2,
                        sonota1,
                        jyutNo,
                        jyMeiNo,
                        urMeiNo,
                        renbn,
                        sonota2};
                rowRepmacRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRepmacRow);
                return rowRepmacRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RepmacDataTable cln = ((RepmacDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RepmacDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnseiGak = base.Columns["seiGak"];
                this.columnDate1 = base.Columns["Date1"];
                this.columnkbn1 = base.Columns["kbn1"];
                this.columncode1 = base.Columns["code1"];
                this.columncode2 = base.Columns["code2"];
                this.columncode4 = base.Columns["code4"];
                this.columnname1 = base.Columns["name1"];
                this.columnname2 = base.Columns["name2"];
                this.columnname3 = base.Columns["name3"];
                this.columnkngk1 = base.Columns["kngk1"];
                this.columnkngk2 = base.Columns["kngk2"];
                this.columnsonota1 = base.Columns["sonota1"];
                this.columnjyutNo = base.Columns["jyutNo"];
                this.columnjyMeiNo = base.Columns["jyMeiNo"];
                this.columnurMeiNo = base.Columns["urMeiNo"];
                this.columnrenbn = base.Columns["renbn"];
                this.columnsonota2 = base.Columns["sonota2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnseiGak = new global::System.Data.DataColumn("seiGak", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseiGak);
                this.columnDate1 = new global::System.Data.DataColumn("Date1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate1);
                this.columnkbn1 = new global::System.Data.DataColumn("kbn1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkbn1);
                this.columncode1 = new global::System.Data.DataColumn("code1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncode1);
                this.columncode2 = new global::System.Data.DataColumn("code2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncode2);
                this.columncode4 = new global::System.Data.DataColumn("code4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncode4);
                this.columnname1 = new global::System.Data.DataColumn("name1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname1);
                this.columnname2 = new global::System.Data.DataColumn("name2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname2);
                this.columnname3 = new global::System.Data.DataColumn("name3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname3);
                this.columnkngk1 = new global::System.Data.DataColumn("kngk1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkngk1);
                this.columnkngk2 = new global::System.Data.DataColumn("kngk2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkngk2);
                this.columnsonota1 = new global::System.Data.DataColumn("sonota1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsonota1);
                this.columnjyutNo = new global::System.Data.DataColumn("jyutNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjyutNo);
                this.columnjyMeiNo = new global::System.Data.DataColumn("jyMeiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjyMeiNo);
                this.columnurMeiNo = new global::System.Data.DataColumn("urMeiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnurMeiNo);
                this.columnrenbn = new global::System.Data.DataColumn("renbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrenbn);
                this.columnsonota2 = new global::System.Data.DataColumn("sonota2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsonota2);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacRow NewRepmacRow() {
                return ((RepmacRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RepmacRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RepmacRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RepmacRowChanged != null)) {
                    this.RepmacRowChanged(this, new RepmacRowChangeEvent(((RepmacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RepmacRowChanging != null)) {
                    this.RepmacRowChanging(this, new RepmacRowChangeEvent(((RepmacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RepmacRowDeleted != null)) {
                    this.RepmacRowDeleted(this, new RepmacRowChangeEvent(((RepmacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RepmacRowDeleting != null)) {
                    this.RepmacRowDeleting(this, new RepmacRowChangeEvent(((RepmacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRepmacRow(RepmacRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDsMac ds = new RepDsMac();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RepmacDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RepmacSchklstDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnseiGak;
            
            private global::System.Data.DataColumn columncode2;
            
            private global::System.Data.DataColumn columncode4;
            
            private global::System.Data.DataColumn columnname1;
            
            private global::System.Data.DataColumn columnname2;
            
            private global::System.Data.DataColumn columnname5;
            
            private global::System.Data.DataColumn columnname4;
            
            private global::System.Data.DataColumn columnjyutNo;
            
            private global::System.Data.DataColumn columnjyMeiNo;
            
            private global::System.Data.DataColumn columnurMeiNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacSchklstDataTable() {
                this.TableName = "RepmacSchklst";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepmacSchklstDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RepmacSchklstDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn seiGakColumn {
                get {
                    return this.columnseiGak;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn code2Column {
                get {
                    return this.columncode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn code4Column {
                get {
                    return this.columncode4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name1Column {
                get {
                    return this.columnname1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name2Column {
                get {
                    return this.columnname2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name5Column {
                get {
                    return this.columnname5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name4Column {
                get {
                    return this.columnname4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jyutNoColumn {
                get {
                    return this.columnjyutNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jyMeiNoColumn {
                get {
                    return this.columnjyMeiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn urMeiNoColumn {
                get {
                    return this.columnurMeiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacSchklstRow this[int index] {
                get {
                    return ((RepmacSchklstRow)(this.Rows[index]));
                }
            }
            
            public event RepmacSchklstRowChangeEventHandler RepmacSchklstRowChanging;
            
            public event RepmacSchklstRowChangeEventHandler RepmacSchklstRowChanged;
            
            public event RepmacSchklstRowChangeEventHandler RepmacSchklstRowDeleting;
            
            public event RepmacSchklstRowChangeEventHandler RepmacSchklstRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRepmacSchklstRow(RepmacSchklstRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacSchklstRow AddRepmacSchklstRow(decimal seiGak, string code2, string code4, string name1, string name2, string name5, string name4, string jyutNo, string jyMeiNo, string urMeiNo) {
                RepmacSchklstRow rowRepmacSchklstRow = ((RepmacSchklstRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        seiGak,
                        code2,
                        code4,
                        name1,
                        name2,
                        name5,
                        name4,
                        jyutNo,
                        jyMeiNo,
                        urMeiNo};
                rowRepmacSchklstRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRepmacSchklstRow);
                return rowRepmacSchklstRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RepmacSchklstDataTable cln = ((RepmacSchklstDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RepmacSchklstDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnseiGak = base.Columns["seiGak"];
                this.columncode2 = base.Columns["code2"];
                this.columncode4 = base.Columns["code4"];
                this.columnname1 = base.Columns["name1"];
                this.columnname2 = base.Columns["name2"];
                this.columnname5 = base.Columns["name5"];
                this.columnname4 = base.Columns["name4"];
                this.columnjyutNo = base.Columns["jyutNo"];
                this.columnjyMeiNo = base.Columns["jyMeiNo"];
                this.columnurMeiNo = base.Columns["urMeiNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnseiGak = new global::System.Data.DataColumn("seiGak", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseiGak);
                this.columncode2 = new global::System.Data.DataColumn("code2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncode2);
                this.columncode4 = new global::System.Data.DataColumn("code4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncode4);
                this.columnname1 = new global::System.Data.DataColumn("name1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname1);
                this.columnname2 = new global::System.Data.DataColumn("name2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname2);
                this.columnname5 = new global::System.Data.DataColumn("name5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname5);
                this.columnname4 = new global::System.Data.DataColumn("name4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname4);
                this.columnjyutNo = new global::System.Data.DataColumn("jyutNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjyutNo);
                this.columnjyMeiNo = new global::System.Data.DataColumn("jyMeiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjyMeiNo);
                this.columnurMeiNo = new global::System.Data.DataColumn("urMeiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnurMeiNo);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacSchklstRow NewRepmacSchklstRow() {
                return ((RepmacSchklstRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RepmacSchklstRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RepmacSchklstRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RepmacSchklstRowChanged != null)) {
                    this.RepmacSchklstRowChanged(this, new RepmacSchklstRowChangeEvent(((RepmacSchklstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RepmacSchklstRowChanging != null)) {
                    this.RepmacSchklstRowChanging(this, new RepmacSchklstRowChangeEvent(((RepmacSchklstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RepmacSchklstRowDeleted != null)) {
                    this.RepmacSchklstRowDeleted(this, new RepmacSchklstRowChangeEvent(((RepmacSchklstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RepmacSchklstRowDeleting != null)) {
                    this.RepmacSchklstRowDeleting(this, new RepmacSchklstRowChangeEvent(((RepmacSchklstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRepmacSchklstRow(RepmacSchklstRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDsMac ds = new RepDsMac();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RepmacSchklstDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RepmacRow : global::System.Data.DataRow {
            
            private RepmacDataTable tableRepmac;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepmacRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRepmac = ((RepmacDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal seiGak {
                get {
                    try {
                        return ((decimal)(this[this.tableRepmac.seiGakColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'seiGak\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.seiGakColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date1 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.Date1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'Date1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.Date1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kbn1 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.kbn1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'kbn1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.kbn1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code1 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.code1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'code1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.code1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code2 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.code2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'code2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.code2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code4 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.code4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'code4\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.code4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name1 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.name1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'name1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.name1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name2 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.name2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'name2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.name2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name3 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.name3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'name3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.name3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal kngk1 {
                get {
                    try {
                        return ((decimal)(this[this.tableRepmac.kngk1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'kngk1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.kngk1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal kngk2 {
                get {
                    try {
                        return ((decimal)(this[this.tableRepmac.kngk2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'kngk2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.kngk2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sonota1 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.sonota1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'sonota1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.sonota1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jyutNo {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.jyutNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'jyutNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.jyutNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jyMeiNo {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.jyMeiNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'jyMeiNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.jyMeiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string urMeiNo {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.urMeiNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'urMeiNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.urMeiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string renbn {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.renbnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'renbn\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.renbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sonota2 {
                get {
                    try {
                        return ((string)(this[this.tableRepmac.sonota2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Repmac\' にある列 \'sonota2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmac.sonota2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseiGakNull() {
                return this.IsNull(this.tableRepmac.seiGakColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseiGakNull() {
                this[this.tableRepmac.seiGakColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate1Null() {
                return this.IsNull(this.tableRepmac.Date1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate1Null() {
                this[this.tableRepmac.Date1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskbn1Null() {
                return this.IsNull(this.tableRepmac.kbn1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkbn1Null() {
                this[this.tableRepmac.kbn1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscode1Null() {
                return this.IsNull(this.tableRepmac.code1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcode1Null() {
                this[this.tableRepmac.code1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscode2Null() {
                return this.IsNull(this.tableRepmac.code2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcode2Null() {
                this[this.tableRepmac.code2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscode4Null() {
                return this.IsNull(this.tableRepmac.code4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcode4Null() {
                this[this.tableRepmac.code4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname1Null() {
                return this.IsNull(this.tableRepmac.name1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname1Null() {
                this[this.tableRepmac.name1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname2Null() {
                return this.IsNull(this.tableRepmac.name2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname2Null() {
                this[this.tableRepmac.name2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname3Null() {
                return this.IsNull(this.tableRepmac.name3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname3Null() {
                this[this.tableRepmac.name3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskngk1Null() {
                return this.IsNull(this.tableRepmac.kngk1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkngk1Null() {
                this[this.tableRepmac.kngk1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskngk2Null() {
                return this.IsNull(this.tableRepmac.kngk2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkngk2Null() {
                this[this.tableRepmac.kngk2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issonota1Null() {
                return this.IsNull(this.tableRepmac.sonota1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsonota1Null() {
                this[this.tableRepmac.sonota1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjyutNoNull() {
                return this.IsNull(this.tableRepmac.jyutNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjyutNoNull() {
                this[this.tableRepmac.jyutNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjyMeiNoNull() {
                return this.IsNull(this.tableRepmac.jyMeiNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjyMeiNoNull() {
                this[this.tableRepmac.jyMeiNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsurMeiNoNull() {
                return this.IsNull(this.tableRepmac.urMeiNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeturMeiNoNull() {
                this[this.tableRepmac.urMeiNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrenbnNull() {
                return this.IsNull(this.tableRepmac.renbnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrenbnNull() {
                this[this.tableRepmac.renbnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issonota2Null() {
                return this.IsNull(this.tableRepmac.sonota2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsonota2Null() {
                this[this.tableRepmac.sonota2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RepmacSchklstRow : global::System.Data.DataRow {
            
            private RepmacSchklstDataTable tableRepmacSchklst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepmacSchklstRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRepmacSchklst = ((RepmacSchklstDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal seiGak {
                get {
                    try {
                        return ((decimal)(this[this.tableRepmacSchklst.seiGakColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'seiGak\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.seiGakColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code2 {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.code2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'code2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.code2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code4 {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.code4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'code4\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.code4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name1 {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.name1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'name1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.name1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name2 {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.name2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'name2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.name2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name5 {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.name5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'name5\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.name5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name4 {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.name4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'name4\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.name4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jyutNo {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.jyutNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'jyutNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.jyutNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jyMeiNo {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.jyMeiNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'jyMeiNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.jyMeiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string urMeiNo {
                get {
                    try {
                        return ((string)(this[this.tableRepmacSchklst.urMeiNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'RepmacSchklst\' にある列 \'urMeiNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableRepmacSchklst.urMeiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseiGakNull() {
                return this.IsNull(this.tableRepmacSchklst.seiGakColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseiGakNull() {
                this[this.tableRepmacSchklst.seiGakColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscode2Null() {
                return this.IsNull(this.tableRepmacSchklst.code2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcode2Null() {
                this[this.tableRepmacSchklst.code2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscode4Null() {
                return this.IsNull(this.tableRepmacSchklst.code4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcode4Null() {
                this[this.tableRepmacSchklst.code4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname1Null() {
                return this.IsNull(this.tableRepmacSchklst.name1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname1Null() {
                this[this.tableRepmacSchklst.name1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname2Null() {
                return this.IsNull(this.tableRepmacSchklst.name2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname2Null() {
                this[this.tableRepmacSchklst.name2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname5Null() {
                return this.IsNull(this.tableRepmacSchklst.name5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname5Null() {
                this[this.tableRepmacSchklst.name5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname4Null() {
                return this.IsNull(this.tableRepmacSchklst.name4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname4Null() {
                this[this.tableRepmacSchklst.name4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjyutNoNull() {
                return this.IsNull(this.tableRepmacSchklst.jyutNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjyutNoNull() {
                this[this.tableRepmacSchklst.jyutNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjyMeiNoNull() {
                return this.IsNull(this.tableRepmacSchklst.jyMeiNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjyMeiNoNull() {
                this[this.tableRepmacSchklst.jyMeiNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsurMeiNoNull() {
                return this.IsNull(this.tableRepmacSchklst.urMeiNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeturMeiNoNull() {
                this[this.tableRepmacSchklst.urMeiNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RepmacRowChangeEvent : global::System.EventArgs {
            
            private RepmacRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacRowChangeEvent(RepmacRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RepmacSchklstRowChangeEvent : global::System.EventArgs {
            
            private RepmacSchklstRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacSchklstRowChangeEvent(RepmacSchklstRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepmacSchklstRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591